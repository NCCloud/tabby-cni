#apiVersion: v1
#kind: Namespace
#metadata:
#  labels:
#    control-plane: controller-manager
#    app.kubernetes.io/name: namespace
#    app.kubernetes.io/instance: system
#    app.kubernetes.io/component: manager
#    app.kubernetes.io/created-by: tabby-cni-controller
#    app.kubernetes.io/part-of: tabby-cni-controller
#    app.kubernetes.io/managed-by: kustomize
#  name: system
#---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: controller-manager
  namespace: system
  labels:
    control-plane: controller-manager
    app.kubernetes.io/name: deployment
    app.kubernetes.io/instance: controller-manager
    app.kubernetes.io/component: manager
    app.kubernetes.io/created-by: tabby-cni-controller
    app.kubernetes.io/part-of: tabby-cni-controller
    app.kubernetes.io/managed-by: kustomize
spec:
  selector:
    matchLabels:
      control-plane: controller-manager
#  replicas: 1
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        control-plane: controller-manager
    spec:
      hostNetwork: true
      # TODO(user): Uncomment the following code to configure the nodeAffinity expression
      # according to the platforms which are supported by your solution. 
      # It is considered best practice to support multiple architectures. You can
      # build your manager image using the makefile target docker-buildx.
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/os
                  operator: In
                  values:
                    - linux
      #  runAsNonRoot: true
        # TODO(user): For common cases that do not require escalating privileges
        # it is recommended to ensure that all your Pods/Containers are restrictive.
        # More info: https://kubernetes.io/docs/concepts/security/pod-security-standards/#restricted
        # Please uncomment the following code if your project does NOT have to work on old Kubernetes
        # versions < 1.19 or on vendors versions which do NOT support this field by default (i.e. Openshift < 4.11 ).
        # seccompProfile:
        #   type: RuntimeDefault
      containers:
      - command:
        - /manager
        #args:
        #- --leader-elect
        args:
        - -metrics-bind-address=:8001
        - -health-probe-bind-address=:8002
        image: ruslanloman/tabby-cni-controller:v0.0.2
        name: manager
        securityContext:
          #privileged: true
          runAsUser: 0
          capabilities:
            add: ["NET_ADMIN", "SYS_TIME"]
        #securityContext:
#        securityContext:
#          runAsUser: 0
#          capabilities:
#            drop:
#              - "ALL"
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8002
          initialDelaySeconds: 15
          periodSeconds: 20
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8002
          initialDelaySeconds: 5
          periodSeconds: 10
        # TODO(user): Configure the resources accordingly based on the project requirements.
        # More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
      serviceAccountName: controller-manager
      terminationGracePeriodSeconds: 10
